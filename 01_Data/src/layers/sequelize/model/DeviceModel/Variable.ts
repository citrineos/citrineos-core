// Copyright (c) 2023 S44, LLC
// Copyright Contributors to the CitrineOS Project
//
// SPDX-License-Identifier: Apache 2.0

import {
  DEFAULT_TENANT_ID,
  ITenantDto,
  IVariableDto,
  OCPP2_0_1,
  OCPP2_0_1_Namespace,
} from '@citrineos/base';
import {
  BeforeCreate,
  BeforeUpdate,
  BelongsTo,
  BelongsToMany,
  Column,
  DataType,
  ForeignKey,
  HasMany,
  HasOne,
  Model,
  Table,
} from 'sequelize-typescript';
import { Component } from './Component.js';
import { VariableAttribute } from './VariableAttribute.js';
import { VariableCharacteristics } from './VariableCharacteristics.js';
import { ComponentVariable } from './ComponentVariable.js';
import { Tenant } from '../Tenant.js';

@Table({
  indexes: [
    {
      unique: true,
      fields: ['name'],
      where: {
        instance: null,
      },
    },
  ],
})
export class Variable extends Model implements OCPP2_0_1.VariableType, IVariableDto {
  static readonly MODEL_NAME: string = OCPP2_0_1_Namespace.VariableType;

  /**
   * Fields
   */

  @Column({
    type: DataType.STRING,
    unique: 'name_instance',
  })
  declare name: string;

  @Column({
    type: DataType.STRING,
    unique: 'name_instance',
  })
  declare instance?: string | null;

  /**
   * Relations
   */

  @BelongsToMany(() => Component, () => ComponentVariable)
  declare components?: Component[];

  @HasMany(() => VariableAttribute)
  declare variableAttributes?: VariableAttribute[];

  @HasOne(() => VariableCharacteristics)
  declare variableCharacteristics?: VariableCharacteristics;

  declare customData?: OCPP2_0_1.CustomDataType | null;

  // Declare the association methods, to be automatically generated by Sequelize at runtime
  public addComponent!: (variable: Component) => Promise<void>;
  public getComponents!: () => Promise<Component[]>;

  @ForeignKey(() => Tenant)
  @Column({
    type: DataType.INTEGER,
    allowNull: false,
    onUpdate: 'CASCADE',
    onDelete: 'RESTRICT',
  })
  declare tenantId: number;

  @BelongsTo(() => Tenant)
  declare tenant?: ITenantDto;

  @BeforeUpdate
  @BeforeCreate
  static setDefaultTenant(instance: Variable) {
    if (instance.tenantId == null) {
      instance.tenantId = DEFAULT_TENANT_ID;
    }
  }

  constructor(...args: any[]) {
    super(...args);
    if (this.tenantId == null) {
      this.tenantId = DEFAULT_TENANT_ID;
    }
  }
}
